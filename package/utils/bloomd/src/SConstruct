import platform
import os
import copy

plat = platform.system()

arch = "/home/ubuntu/github/lede/staging_dir"
arch += "/toolchain-arm_cortex-a9+vfpv3_gcc-5.4.0_musl-1.1.16_eabi/bin/"
arch += "arm-openwrt-linux"

env_options = {"CC"    : arch + "-gcc",
               "CXX"   : arch + "-g++",
               "LD"    : arch + "-g++",
               "AR"    : arch + "-ar",
               "STRIP" : arch + "-strip",
}

env_spooky = Environment(**env_options)
env_spooky.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_spooky['CPPPATH'] = ['deps/spookyhash/']
env_spooky['CPPFLAGS'] = "-fno-exceptions -O2"
spooky = env_spooky.Library('spooky', Glob("deps/spookyhash/*.cpp"))

env_murmur = Environment(**env_options)
env_murmur.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_murmur['CPPPATH'] = ['deps/murmurhash/']
env_murmur['CPPFLAGS'] = "-fno-exceptions -O2"
murmur = env_murmur.Library('murmur', Glob("deps/murmurhash/*.cpp"))

env_bloom = Environment(**env_options)
env_bloom.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_bloom['CCFLAGS'] = '-std=c99 -Wall -Werror -Wextra -O2 -D_GNU_SOURCE'
bloom = env_bloom.Library('bloom', Glob("src/libbloom/*.c"), LIBS=[murmur, spooky])

env_test = Environment(**env_options)
env_test.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_test['CCFLAGS'] = '-std=c99 -Wall -Werror -Wextra -Wno-unused-function -D_GNU_SOURCE -Isrc/libbloom/'
env_test.Program('test_libbloom_runner', Glob("tests/libbloom/*.c"), LIBS=["check", bloom, murmur, spooky, "m"])

env_inih = Environment(**env_options)
env_inih.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_inih['CPATH'] = ['deps/inih/']
env_inih['CFLAGS'] = "-O2"
inih = env_inih.Library('inih', Glob("deps/inih/*.c"))

env_bloomd_with_err = Environment(**env_options)
env_bloomd_with_err.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_bloomd_with_err['CCFLAGS'] = '-std=c99 -D_GNU_SOURCE -Wall -Wextra -Werror -O2 -pthread -Isrc/bloomd/ -Ideps/inih/ -Ideps/libev/ -Isrc/libbloom/'

env_bloomd_without_unused_err = Environment(**env_options)
env_bloomd_without_unused_err.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_bloomd_without_unused_err['CCFLAGS'] = '-std=c99 -D_GNU_SOURCE -Wall -Wextra -Wno-unused-function -Wno-unused-result -Werror -O2 -pthread -Isrc/bloomd/ -Ideps/inih/ -Ideps/libev/ -Isrc/libbloom/'

env_bloomd_without_err = Environment(**env_options)
env_bloomd_without_err.Append(ENV = {'STAGING_DIR': os.environ['STAGING_DIR']})
env_bloomd_without_err['CCFLAGS'] = '-std=c99 -D_GNU_SOURCE -O2 -pthread -Isrc/bloomd/ -Ideps/inih/ -Ideps/libev/ -Isrc/libbloom/'

objs =  env_bloomd_with_err.Object('src/bloomd/config', 'src/bloomd/config.c') + \
        env_bloomd_without_err.Object('src/bloomd/networking', 'src/bloomd/networking.c') + \
        env_bloomd_with_err.Object('src/bloomd/barrier', 'src/bloomd/barrier.c') + \
        env_bloomd_with_err.Object('src/bloomd/conn_handler', 'src/bloomd/conn_handler.c') + \
        env_bloomd_with_err.Object('src/bloomd/filter', 'src/bloomd/filter.c') + \
        env_bloomd_with_err.Object('src/bloomd/filter_manager', 'src/bloomd/filter_manager.c') + \
        env_bloomd_with_err.Object('src/bloomd/background', 'src/bloomd/background.c') + \
        env_bloomd_without_err.Object('src/bloomd/art', 'src/bloomd/art.c')

bloom_libs = ["pthread", bloom, murmur, inih, spooky, "m"]
if plat == 'Linux':
   bloom_libs.append("rt")

bloomd = env_bloomd_with_err.Program('bloomd', objs + ["src/bloomd/bloomd.c"], LIBS=bloom_libs)

if plat == "Darwin":
    bloomd_test = env_bloomd_without_err.Program('test_bloomd_runner', objs + Glob("tests/bloomd/runner.c"), LIBS=bloom_libs + ["check"])
else:
    bloomd_test = env_bloomd_without_unused_err.Program('test_bloomd_runner', objs + Glob("tests/bloomd/runner.c"), LIBS=bloom_libs + ["check"])

bench_obj = Object("bench", "bench.c", CCFLAGS="-std=c99 -O2")
Program('bench', bench_obj, LIBS=["pthread"])

# By default, only compile bloomd
Default(bloomd)
